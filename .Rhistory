attr(pts ,"class")
coords =
function(x, y)
{
if (!is.numeric(x) || !is.numeric(y) ||
!all(is.finite(x)) ||
!all(is.finite(y)))
stop("invalid coordinates")
if (length(x) != length(y))
stop("coordinate lengths differ")
pts = list(x = x, y = y)
class(pts) = "coords"
pts
}
a <- coord(1, 2)
a <- coords(1, 2)
a
a
unclass(a)
a
a
unclass(a)
vcoords =
function(x, y, v)
{
if (!is.numeric(x) || !is.numeric(y) ||
!is.numeric(v) ||
!all(is.finite(x)) ||
!all(is.finite(y)))
stop("invalid coordinates")
if(length(x) != length(y) ||
length(x) != length(v))
stop("argument lengths differ")
pts = list(x = x, y = y, v = v)
class(pts) = c("vcoords", "coords")
pts
}
pts = vcoords(x = round(rnorm(5), 2),
y = round(rnorm(5), 2),
v = round(runif(5, 0, 100)))
print.coords =
function(obj)
{
print(paste("(",
format(xcoords(obj)),
", ",
format(ycoords(obj)),
")", sep = ""),
quote = FALSE)
}
print.coords(vcoord)
print.coords(vcoords)
xcoords = function(obj) obj$x
print.coords(vcoords)
print.coords(vcoord)
print.coords(pts)
ycoords = function(obj) obj$y
print.coords(pts)
display(pts)
setClass("vcoords",
representation(value = "numeric"),
contains = "coords")
setClass("vcoords",
representation(value = "numeric"),
contains = "coords")
TODO
?TODO
?cat
cat("Cov =", 4, sep=" ")
cat("Cov = ", 4, sep=)
cat("Cov = ", 4, sep="")
stop("stop", "theat")
stop("stop", "theat")
stop("stop", "theat", 5)
stop("stop", "theat ", 5)
ls()
ls.str()
str(a)
typeof(str)a
typeof(str(a))
?typeof
typeof(2)
class(2)
dir()
?format
x <- c(1, 2, ,3)
x <- c(1, 2, 3)
format(x)
typeof(format(x))
write.csv
?write.csv
seq(1, 10)
1:1-0
1:10
seq(along=5)
seq(along=10)
seq(along=2)
seq(along=1)
seq(along=c(1, 2, 3 ,4))
seq(along=c(4, 2, 1)
seq(along=c(4, 2, 1))
?rep
x <- 1
rep(x, 5)
rep(x, 10)
rep(list(x=1, y=2), 5)
rep(list(x=1, y=2), 5, simplify=F)
a <- rep(list(x=1, y=2), 5, simplify=F)
a[[1]]
a[[2]]
q
a
a[[1]]
a[[1]]$
a[[1]]$x
a$x
?replicate
replicate(list(x=1, y=2), 5, simplify=F)
replicate(5, list(x=1, y=2), 5, simplify=F)
replicate(5, list(x=1, y=2), simplify=F)
a[[1]]
1 <- replicate(5, list(x=1, y=2), simplify=F)
a <- replicate(5, list(x=1, y=2), simplify=F)
a[[1]]
data.frame(x=c(1,1), y=c1)
data.frame(x=c(1,1), y=1)
data.frame(x=c(1,1,2), y=c(1, 2)
data.frame(x=c(1,1,2), y=c(1, 2))
list(a=c(1,1), y=2, b="CEWDEW")
array(3, dim=c(1))
array(3, dim=c(1,2 ,3))
c <- array(3, dim=c(1,2 ,3))
c[1]
c[1, 1 ,1]
c[1, 1 ,1, 2]
c[1, 1 ,1]
c[1, 2 ,3]
a <- c(1, 2, 3, 1)
factor(a, levels=c(1, 2, 3))
?which
m <- matrix(1:12, 3, 4)
m
which(m %% 2)
which(m %% 3 == 0)
m %% 3 == 0
a <- c(1, 2, 3 ,4)
a[which(a %% 4 == 0)]
a[a %% 4 == 0]
a %% 4 == 0
df <- data.frame(x=c(1,2, 3), y=2)
df
df$x
df['x']
typeof(df['x'])
typeof(df$)
typeof(df$x)
df[1, ]
df[, 1]
typeof(df)
typeof(df['x']$x)
typeof(df['x']['x'])
typeof(df['x']['x']$x)
mode(4)
type(4)
typeof(4)
df[['x']]
typeof(df[['x']])
list(x=c(1, 1), y=c(1, 4)
list(x=c(1, 1), y=c(1, 4))
a <- list(x=c(1, 1), y=c(1, 4))
a$x
a['x']
a['x']$x
a['x']['x']
a['x']['x']['x']
a
as.array(a)
x <- as.array(a)
x
x[1,1]
x[1]
x[1][1]
x[[1]]
attributes(x)
dimnames(a)
a
dimnames(a)
dimnames(x)
x
typeof(x)
typeof(a)
mode(a)
?which.max
a <- c(1, 2, 3)
which.max(a)
sort(a)
rev(a)
a <- c(a, a)
a
cut(a, 4)
cut(a, 2)
x <- c(1, 2)
match(x, a)
a
x
match(a, x)
?intersecgt
?intersecgt
?intersect
intersect(a, x)
match(a, x)
c <- match(a, x)
c
na.omit(c)
table(x)
?subset
a <- c(1,2 ,3 , 4)
subset(a, a > 2)
subset(a, a %% 2 == 0)
df
subset(df, df$x %% 2 ==0)
df[which(df$x == 2), ]
?sample
sample(x)
x
sample(x, 5)
x
sample(x, 5, replace=T)
sample.int(5, 6)
sample.int(5, 6, replace=T)
?prop.table
prop.table(x)
x
a <- c(1,2 ,3 ,4 ,5 )
prop.table(a)
?diff
x
diff(x, lag=1)
a <- c(1, 2 ,3 ,4 ,5)
diff(a)
quantile(x, 0.5)
rank(x)
x
?rank
a
rank(a)
rev(a)
rank(rev(a))
x <- 3.3242342
round(x, 3)
round(x, 5)
log(x, 10)
?sca;e
?scale
x <- matrix(1, nrow=3, ncol=2)
x
scale(x)
x <- matrix(1, nrow=3, ncol=2)
x[1, 2] <- 3
x[1, 1] <- 3
x
scale(x)
?pmin
x
cumsum(xx)
cumsum(x)
cumprod(x)
x
union(x, x)
x
interesect(x, x)
intersect(x, x)
a
union(a, a)
intersect(a, a)
?setdiff
?Conj
?convolve
?merge
df
a = data.frame(x=c(1, 1), d=c(2, 2))
merge(a, df)
merge(a, df, by=c("x"))
merge(a, df, by=c("x"), all.x=T)
merge(a, df, by=c("x"), all.y=T)
merge(a, df, by=c("x"), all.x=T)
merge(a, df, by=c("x"), all.d=T)
merge(a, df, by=c("x"), all.y=T)
?xtabs
DF <- as.data.frame(UCBAdmissions)
DF
xtabs(Freq ~ Gender + Admit, DF)
?stack
df
stack(df)
unstack(stack(df))
?reshape
reshape(df, idvar="x")
reshape(df)
reshape(df, idvar="y")
?reshape
reshape(df, direction="long", idvar="y")
?aggreagte
?aggregate
aggregate
x
df
aggregate(df, by="x", FUN=mean)
aggregate(df, by=c("x"), FUN=mean)
aggregate(df, by=c('x'), FUN=mean)
aggregate(df, by=list('x'), FUN=mean)
aggregate(df, by=list(c('x'), FUN=mean)
aggregate(df, by=list(c('x')), FUN=mean)
df
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
testDF
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
aggregate(df, by=df$x), FUN=mean)
aggregate(df, by=df$x, FUN=mean)
aggregate(df, by=df['x'], FUN=mean)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
?substr
substr("ewfwefw", 1, 3)
strsplit("ewfwefw", "e")
?grep
grep("ewfwefw", "e")
grep("ewfwefw", "ewf")
grep("ewf", "ewfwefw")
grep("e", "ewfwefw")
nchar("wefewfw")
length("wqwdq")
a<- ewfwef
a<- "ewfwef"
length(a)
nchar(a)
?strftime
?coplot
coplot(lat ~ long | depth, data = quakes)
?coplot
coplot(lat ~ long | depth, data = quakes)
?interaction.plt
?interaction.plot
require(graphics)
with(ToothGrowth, {
interaction.plot(dose, supp, len, fixed = TRUE)
dose <- ordered(dose)
interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, leg.bty = "o")
interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, type = "p")
})
?xyplot
require(lattice)
?xyplot
require(stats)
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
update(trellis.last.object(),
strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
par.strip.text = list(cex = 0.75),
aspect = "iso")
?barchart
?nls
?spline
spline(4, 2)
spline(1, 2)
spline(c(1, 1, 3), c(2, 4 ,5)
spline(c(1, 1, 3), c(2, 4 ,5))
?t.test
?rt
?rlogis
?do.call
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
?regeom
?rgeom
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
setwd("~/Documents/Harvard/Stats/STAT221/HW 4")
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
summary(imp.chain)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
89
[1] 0.2396495
[1] 110
[1] 0.1984599
[1] 0
N.old <- 89
N.new <- 110
theta.old <- 0.2396495
theta.new <- 0.1984599
log.posterior(N.new, theta.new, y)
y <- imp
log.posterior(N.new, theta.new, y)
log.posterior(N.old, theta.old, y)
dgeom(N.old, 1 / N.new, log=T)
dgeom(N.new, 1 / N.old, log=T)
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T)
S <- sum(y)
S <- sum(y)
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T)
n <- length(y)
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T)
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T))
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
log.posterior(N.new, theta.new, y) + dgeom(N.old, 1 / N.new, log=T) +
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T) -
log.posterior(N.old, theta.old, y) - dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
log.posterior(N.new, theta.new, y)
log.posterior(N.old, theta.old, y)
dgeom(N.old, 1 / N.new, log=T) +
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T)
dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T))
dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
- dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T))
- dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
- dgeom(N.new, 1 / N.old, log=T) -
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
dgeom(N.old, 1 / N.new, log=T) +
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T)
dgeom(N.old, 1 / N.new, log=T)
dgeom(N.new, 1 / N.old, log=T)
dbeta((N.old * theta.old) / N.new, 1 + S, 1 + (n * N.new - S), log=T)
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T))
dbeta((N.new * theta.new) / N.old, 1 + S, 1 + (n * N.old - S), log=T)
imp.chain_2st <- mcmc.mh2step(imp)
summary(im.chain_2st)
summary(imp.chain_2st)
imp.chain_2st <- mcmc.mh2step(imp)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain_2st <- mcmc.mh2step(imp)
summary(imp.chain_2st)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain <- mcmc.mh(imp)
imp.chain_2st <- mcmc.mh2step(imp)
source("mcmc_raft.R")
## question 1.4
imp <- read.table("./dat/impala.txt")[2:6, ]
imp <- as.numeric(levels(imp))[imp]
wat <-  read.table("./dat/waterbuck.txt")[2:6, ]
wat <- as.numeric(levels(wat))[wat]
imp.chain_2st <- mcmc.mh2step(imp)
summary(imp.chain_2st)
